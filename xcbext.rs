/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_extension_t {
    pub name: *const ::libc::c_char,
    pub global_id: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_xcb_extension_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_extension_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub count: size_t,
    pub ext: *mut xcb_extension_t,
    pub opcode: uint8_t,
    pub isvoid: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_protocol_request_t = Struct_Unnamed1;
pub type Enum_xcb_send_request_flags_t = ::libc::c_uint;
pub const XCB_REQUEST_CHECKED: ::libc::c_uint = 1;
pub const XCB_REQUEST_RAW: ::libc::c_uint = 2;
pub const XCB_REQUEST_DISCARD_REPLY: ::libc::c_uint = 4;
pub const XCB_REQUEST_REPLY_FDS: ::libc::c_uint = 8;
#[link(name = "libxcb")]
extern "C" {
    pub fn xcb_send_request(c: *mut xcb_connection_t, flags: ::libc::c_int,
                            vector: *mut Struct_iovec,
                            request: *const xcb_protocol_request_t)
     -> ::libc::c_uint;
    pub fn xcb_send_request_with_fds(c: *mut xcb_connection_t,
                                     flags: ::libc::c_int,
                                     vector: *mut Struct_iovec,
                                     request: *const xcb_protocol_request_t,
                                     num_fds: ::libc::c_uint,
                                     fds: *mut ::libc::c_int)
     -> ::libc::c_uint;
    pub fn xcb_send_request64(c: *mut xcb_connection_t, flags: ::libc::c_int,
                              vector: *mut Struct_iovec,
                              request: *const xcb_protocol_request_t)
     -> uint64_t;
    pub fn xcb_send_request_with_fds64(c: *mut xcb_connection_t,
                                       flags: ::libc::c_int,
                                       vector: *mut Struct_iovec,
                                       request: *const xcb_protocol_request_t,
                                       num_fds: ::libc::c_uint,
                                       fds: *mut ::libc::c_int) -> uint64_t;
    pub fn xcb_send_fd(c: *mut xcb_connection_t, fd: ::libc::c_int) -> ();
    pub fn xcb_take_socket(c: *mut xcb_connection_t,
                           return_socket:
                               ::std::option::Option<extern "C" fn(closure:
                                                                       *mut ::libc::c_void)
                                                         -> ()>,
                           closure: *mut ::libc::c_void, flags: ::libc::c_int,
                           sent: *mut uint64_t) -> ::libc::c_int;
    pub fn xcb_writev(c: *mut xcb_connection_t, vector: *mut Struct_iovec,
                      count: ::libc::c_int, requests: uint64_t)
     -> ::libc::c_int;
    pub fn xcb_wait_for_reply(c: *mut xcb_connection_t,
                              request: ::libc::c_uint,
                              e: *mut *mut xcb_generic_error_t)
     -> *mut ::libc::c_void;
    pub fn xcb_wait_for_reply64(c: *mut xcb_connection_t, request: uint64_t,
                                e: *mut *mut xcb_generic_error_t)
     -> *mut ::libc::c_void;
    pub fn xcb_poll_for_reply(c: *mut xcb_connection_t,
                              request: ::libc::c_uint,
                              reply: *mut *mut ::libc::c_void,
                              error: *mut *mut xcb_generic_error_t)
     -> ::libc::c_int;
    pub fn xcb_poll_for_reply64(c: *mut xcb_connection_t, request: uint64_t,
                                reply: *mut *mut ::libc::c_void,
                                error: *mut *mut xcb_generic_error_t)
     -> ::libc::c_int;
    pub fn xcb_get_reply_fds(c: *mut xcb_connection_t,
                             reply: *mut ::libc::c_void, replylen: size_t)
     -> *mut ::libc::c_int;
    pub fn xcb_popcount(mask: uint32_t) -> ::libc::c_int;
    pub fn xcb_sumof(list: *mut uint8_t, len: ::libc::c_int) -> ::libc::c_int;
}
