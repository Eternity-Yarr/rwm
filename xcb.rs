/* automatically generated by rust-bindgen */

pub enum Struct_xcb_connection_t { }
pub type xcb_connection_t = Struct_xcb_connection_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub data: *mut ::libc::c_void,
    pub rem: ::libc::c_int,
    pub index: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_iterator_t = Struct_Unnamed1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed2 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_reply_t = Struct_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub pad: [uint32_t; 7usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_event_t = Struct_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub response_type: uint8_t,
    pub pad0: uint8_t,
    pub sequence: uint16_t,
    pub length: uint32_t,
    pub event_type: uint16_t,
    pub pad1: uint16_t,
    pub pad: [uint32_t; 5usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_ge_event_t = Struct_Unnamed4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub response_type: uint8_t,
    pub error_code: uint8_t,
    pub sequence: uint16_t,
    pub resource_id: uint32_t,
    pub minor_code: uint16_t,
    pub major_code: uint8_t,
    pub pad0: uint8_t,
    pub pad: [uint32_t; 5usize],
    pub full_sequence: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_generic_error_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub sequence: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_void_cookie_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_xcb_auth_info_t {
    pub namelen: ::libc::c_int,
    pub name: *mut ::libc::c_char,
    pub datalen: ::libc::c_int,
    pub data: *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct_xcb_auth_info_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_xcb_auth_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type xcb_auth_info_t = Struct_xcb_auth_info_t;
pub enum Struct_xcb_special_event { }
pub type xcb_special_event_t = Struct_xcb_special_event;
pub enum Struct_xcb_extension_t { }
pub type xcb_extension_t = Struct_xcb_extension_t;
#[link(name = "libxcb")]
extern "C" {
    pub fn xcb_flush(c: *mut xcb_connection_t) -> ::libc::c_int;
    pub fn xcb_get_maximum_request_length(c: *mut xcb_connection_t)
     -> uint32_t;
    pub fn xcb_prefetch_maximum_request_length(c: *mut xcb_connection_t)
     -> ();
    pub fn xcb_wait_for_event(c: *mut xcb_connection_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_poll_for_event(c: *mut xcb_connection_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_poll_for_queued_event(c: *mut xcb_connection_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_poll_for_special_event(c: *mut xcb_connection_t,
                                      se: *mut xcb_special_event_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_wait_for_special_event(c: *mut xcb_connection_t,
                                      se: *mut xcb_special_event_t)
     -> *mut xcb_generic_event_t;
    pub fn xcb_register_for_special_xge(c: *mut xcb_connection_t,
                                        ext: *mut xcb_extension_t,
                                        eid: uint32_t, stamp: *mut uint32_t)
     -> *mut xcb_special_event_t;
    pub fn xcb_unregister_for_special_event(c: *mut xcb_connection_t,
                                            se: *mut xcb_special_event_t)
     -> ();
    pub fn xcb_request_check(c: *mut xcb_connection_t,
                             cookie: xcb_void_cookie_t)
     -> *mut xcb_generic_error_t;
    pub fn xcb_discard_reply(c: *mut xcb_connection_t,
                             sequence: ::libc::c_uint) -> ();
    pub fn xcb_discard_reply64(c: *mut xcb_connection_t, sequence: uint64_t)
     -> ();
    pub fn xcb_get_extension_data(c: *mut xcb_connection_t,
                                  ext: *mut xcb_extension_t)
     -> *const Struct_xcb_query_extension_reply_t;
    pub fn xcb_prefetch_extension_data(c: *mut xcb_connection_t,
                                       ext: *mut xcb_extension_t) -> ();
    pub fn xcb_get_setup(c: *mut xcb_connection_t)
     -> *const Struct_xcb_setup_t;
    pub fn xcb_get_file_descriptor(c: *mut xcb_connection_t) -> ::libc::c_int;
    pub fn xcb_connection_has_error(c: *mut xcb_connection_t)
     -> ::libc::c_int;
    pub fn xcb_connect_to_fd(fd: ::libc::c_int,
                             auth_info: *mut xcb_auth_info_t)
     -> *mut xcb_connection_t;
    pub fn xcb_disconnect(c: *mut xcb_connection_t) -> ();
    pub fn xcb_parse_display(name: *const ::libc::c_char,
                             host: *mut *mut ::libc::c_char,
                             display: *mut ::libc::c_int,
                             screen: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn xcb_connect(displayname: *const ::libc::c_char,
                       screenp: *mut ::libc::c_int) -> *mut xcb_connection_t;
    pub fn xcb_connect_to_display_with_auth_info(display:
                                                     *const ::libc::c_char,
                                                 auth: *mut xcb_auth_info_t,
                                                 screen: *mut ::libc::c_int)
     -> *mut xcb_connection_t;
    pub fn xcb_generate_id(c: *mut xcb_connection_t) -> uint32_t;
}
